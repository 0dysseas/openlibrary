{'type': {'name': 'type/doc'}, 'name': 'dev/docs/infogami', 'd': {'body': '<p>The Open Library interface is powered by infogami -- a cleaner, simpler alternative to other wiki applications. \r\nBut unlike other wikis, Infogami has the flexibility to handle different classes of data. Most wikis let you store unstructured pages -- big blocks of text. \r\nInfogami lets you store structured data.\r\n\r\n<a name="origin_footnote1"></a><a href="#footnote1" class="footnote">[1]</a>\r\n</p>\r\n\r\n<p>In addition to this, infogami facilitates the creation of dynamic HTML templates and macros. This flexible environment enables users to create, \r\nshare and build collaborative interfaces. With Open Library in particular, we are focused on building a productive and vital community focused on the discovery of books.</p>\r\n\r\n<p>In this document, you\'ll learn how to develop for infogami, including building new templates for displaying your own data, running your own copy, and developing new features and plugins.</p>\r\n\r\n<p>To discuss this document, join the <a href="http://mail.archive.org/cgi-bin/mailman/listinfo/ol-discuss">General Discussion</a> mailing list.</p>\r\n\r\n<p><a name="toc"></a>\r\n   </p><div id="toc-header" style="clear: both;"><b>Table of Contents</b></div>\r\n\r\n<table border="0" cellpadding="8" cellspacing="0" width="100%">\r\n    <tbody><tr><td valign="top" width="50%">\r\n\r\n<table border="0" cellpadding="0" cellspacing="0" width="100%">\r\n    <tbody><tr>\r\n        <td class="toc" colspan="3" width="100%"><b><a href="#summary">Summary (Audience Statement)</a></b></td>\r\n    </tr><tr>\r\n        <td class="toc" colspan="3" width="100%"><b><a href="#intro">Introduction</a></b></td>\r\n    </tr><tr>\r\n        <td class="toc" colspan="3"><b>Architecture</b></td>\r\n    </tr><tr>\r\n        <td class="toc-number"><a href="#anchor1">1</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Web Server</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-number"><a href="#anchor2">2</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Templates</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor2.1">2.1</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">web.py</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor2.2">2.2</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">infogami</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor2.3">2.3</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">OL application</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-number"><a href="#anchor3">3</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Search</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-number"><a href="#anchor4">4</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Data</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc" colspan="3"><b>Template Basics</b></td>\r\n    </tr><tr>\r\n        <td class="toc-number"><a href="#anchor5">5.</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Types</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor5.1">5.1</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Primitive Types</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor5.2">5.2</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Compound Types</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-number"><a href="#anchor6">6.</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Templates</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor6.1">6.1</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Type-specific Templates</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor6.2">6.2</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Default Templates</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor6.3">6.3</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Custom Templates</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor6.4">6.4</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Useful Functions</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-number"><a href="#anchor7">7.</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Macros</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor7.1">7.1</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Best Practices</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor7.2">7.2</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Embedding</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n</tr></tbody></table>\r\n\r\n<p></p></td><td valign="top" width="50%">\r\n\r\n<table border="0" cellpadding="0" cellspacing="0" width="100%">\r\n    <tbody><tr>\r\n        <td class="toc" colspan="3"><b>WikiLanguage</b></td>\r\n    </tr><tr>\r\n        <td class="toc-number"><a href="#anchor8">8</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Formatting Conventions</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor8.1">8.1</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Page Headers</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n   </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor8.2">8.2</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Format Commands</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n   </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor8.3">8.3</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Working with Types</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n   </tr><tr>\r\n        <td class="toc-number"><a href="#anchor9">9</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Template Syntax</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor9.1">9.1</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Conditionals</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n</tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor9.2">9.2</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Loops and Iterations</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n</tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor9.3">9.3</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Regular Expressions</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc" colspan="3"><b>The Infogami API</b></td>\r\n    </tr><tr>\r\n        <td class="toc-number"><a href="#anchor10">10.</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Plugins</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor10.1">10.1</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Special Pages and Modes</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor10.2">10.2</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Actions</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor10.3">10.3</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Classes</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor10.4">10.4</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Decorators</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n    </tr><tr>\r\n        <td class="toc-link-end"><a href="#anchor10.5">10.5</a>&nbsp;&nbsp;</td>\r\n        <td class="toc" width="100%">Security Considerations</td>\r\n        <td class="toc-link-end" align="center">&nbsp;&nbsp;</td>\r\n<!-- </tr><tr>\r\n        <td class="toc" colspan="3"><a href="#anchor11"><b>Acknowledgements</b></a></td>\r\n-->\r\n  </tr><tr>\r\n        <td class="toc" colspan="3"><a href="#anchor12"><b>Authors</b></a></td>\r\n    </tr><tr>\r\n        <td class="toc" colspan="3"><a href="#anchor13"><b>References</b></a></td>\r\n    </tr><tr>\r\n        <td class="toc" colspan="3"><a href="#anchor14"><b>Template and Plugin Examples</b></a></td>\r\n    </tr><tr>\r\n        <td class="toc" colspan="3"><a href="#anchor16"><b>Code Repository</b></a></td>\r\n    </tr><tr>\r\n        <td class="toc" colspan="3"><a href="#anchor17"><b>Installing the Software</b></a></td>\r\n  <!--  </tr><tr>\r\n        <td class="toc" colspan="3"><a href="#anchorA"><b>A.</b></a>&nbsp;&nbsp;<b>Differences From Python</b></td>        \r\n  -->\r\n  </tr><tr>\r\n        <td class="toc" colspan="3"><a href="#anchor18"><b>Troubleshooting</b></a></td>        \r\n</tr></tbody></table>\r\n\r\n<p></p></td></tr></tbody></table>\r\n\r\n<p><a name="summary"></a></p><h2>&nbsp;&nbsp;Summary (Audience Statement)</h2>\r\n\r\n<p>\r\nThis document describes the internal workings of the Open Library\r\nsoftware, from a developers\' point of view.  You should read it if you\r\nare:</p>\r\n\r\n<p><b>1)</b> a software developer wanting to add new features to Open Library.  To\r\ndo this, you will also have to be a good Python programmer experienced\r\nin writing web server applications (not necessarily in Python).  The\r\ndocument will explain the Open Library\'s software architecture and its\r\ninternal interfaces, and will explain how to write extensions (plugins),\r\nbut the sections about plugin writing will assume that you are familiar with Python and web programming\r\nin general.</p>\r\n\r\n If you do not yet know Python, you should first study the\r\n[Python documentation](http://www.python.org/doc/) or the free book\r\n[Dive into Python](http://diveintopython.org) .   Python is an easy language to learn, but\r\nthe OL codebase is probably not understandable by complete beginners.\r\nFor web server principles, the somewhat dated [Philip and Alex\'s Guide to\r\nWeb Publishing](http://philip.greenspun.com/panda) is still an\r\ninformative read, though maybe someone can suggest something newer.  You\r\nshould also understand the principles of software security --\r\nsee [David A Wheeler\'s page](http://www.dwheeler.com) for many documents.</p>\r\n\r\n<p><b>2)</b> A user or web designer wanting to improve or customize the Open\r\nLibrary\'s user interface, either for yourself or for our whole\r\ncommunity.  You will mainly want to study the section about template\r\nprogramming.  You will need to know how to write HTML and it will help\r\nif you\'ve done some server-side template programming (such as in PHP).\r\nIt will also help if you\'ve had some exposure to Python, but the\r\nprogramming skills you\'ll need for template writing are generally less\r\nintense than they\'d be for extension writing.<p>\r\n\r\n<p><b>3)</b> A general user wanting to know how the software works behind the\r\nscenes at a technical level.  You might not understand all the details, but reading the doc\r\nshould give you a general impression of how sites like this are put\r\ntogether.</p>\r\n\r\n<p><b>4)</b> A librarian or metadata maintainer wanting to process large volumes of\r\nmetadata for import into the Open Library.  If you only want to import a few books, it\'s\r\nprobably easiest to use the web interface (or the Z39.50 interface once we have one).  To\r\nimport bulk data, you\'ll have to process it into a format that Open Library can understand,\r\nwhich may require programming, but you can use your own choices of languages and\r\nplatforms for that purpose since you only have to create uploadable files, rather than\r\nuse language-specific interfaces.  You\'ll mainly want to look at the section about data\r\nformats and schemas.\r\n\r\n<p>If you just want to be an OL user accessing or editing book data, you do\r\nNOT need to read this doc.  The doc is about how to customize and extend\r\nthe software, not how to use it.  As developers and designers, our goal\r\nis to make the site self-explanatory for users and not need much separate\r\ndocumentation, but we do have some user docs at <font color="green"><i>(url\'s....)</i></font>.\r\n</p>\r\n\r\n<p><a name="intro"></a></p><h2>&nbsp;&nbsp;Introduction</h2>\r\n\r\n<p>Infogami is a wiki application framework built on <a href="http://webpy.org/">web.py.</a>  Actual\r\napplications (like <a href="http://demo.openlibrary.org/">Open Library</a>) are written by extending Infogami\r\nthrough two layers: plugins and templates.  Plugins are <a href="http://python.org">Python</a> modules\r\nthat get loaded into Infogami through a special API.   They\r\nare invoked by submitting HTTP requests to the application, either HTML\r\nform posts or direct GET requests.  Plugins can use any library or\r\napplication code that they wish, and they create Python objects to\r\nrepresent results, that then get expanded to HTML by templates.\r\nTemplates are a mixture of HTML text and user-written code,\r\napproximately in the spirit of PHP templates<!--, but a bit less powerful -->.\r\nThe user-written code is in a special-purpose scripting language that is\r\napproximately a Python subset, which runs in a hopefully-secure\r\nserver-side interpreter (embedded in the Python app) that has limited\r\naccess to system functions and resources.</p>\r\n\r\n\r\n<p><a name="basics"></a></p><h2>&nbsp;&nbsp;Architecture</h2>\r\n\r\n<p><a name="anchor1"></a><h3><a href="#toc" class="toc-link">1.</a>&nbsp;&nbsp;Web Server</h3>\r\n\r\n<p>The <a href="http://lighttpd.net/">lighttpd</a> HTTP server runs <a href="http://infogami.org/">Infogami</a> through a FastCGI interface using <a href="http://trac.saddi.com/flup">Flup</a>.  (There can be multiple concurrent infogami instances that the lighttpd server distributes requests between, although Open Library currently just runs one.)  Infogami is written\r\n   in <a href="http://python.org/">Python</a> (Open Library currently requires 2.5 or greater) and uses <a href="http://webpy.org/">web.py</a> and <a href="http://demo.openlibrary.org/about/tech"><em>ThingDB</em></a>.  ThingDB uses <a href="http://postgresql.org/">PostgreSQL</a> as its data store. <a href="http://www.initd.org/tracker/psycopg/wiki/PsycopgTwo">Psycopg2</a> is the Python driver for PostgreSQL. Open Library uses <a href="http://cr.yp.to/daemontools/supervise.html">supervise</a> (see also <a href="http://cr.yp.to/daemontools.html">daemontools</a>) to make sure everything keeps running. <a name="origin_footnote2"></a><a href="#footnote2" class="footnote">[2]</a>\r\n</p>\r\n\r\n<p><a name="anchor2"></a><h3><a href="#toc" class="toc-link">2.</a>&nbsp;&nbsp;Templates</h3>\r\n\r\n<p>The infogami application relies on various <em>Web templates</em> (these are code+HTML snippets).  The initial templates are static files but they get edited through the wiki interface, and new ones get added through the wiki, so the real versions live entirely in the database. \r\n</p>\r\n\r\n<p><a name="anchor2.1"></a><h4><a href="#toc" class="toc-link">2.1</a>&nbsp;&nbsp;web.py</h4>\r\n\r\n<p>The goal of web.py is to build the ideal way to make web apps. web.py allows you to build HTTP responses, makes the database\r\neasier to use, and creates a templating evironment that tries to bring Python into HTML. [<a href="http://groups.google.com/group/webpy/msg/f266701d97e7ceb1">*</a>]</p>\r\n\r\n<p><a name="anchor2.2"></a><h4><a href="#toc" class="toc-link">2.2</a>&nbsp;&nbsp;infogami</h4>\r\n\r\n<p>Each infogami page (i.e. something with a URL) has an associated type. Each type contains a schema that states what fields can be used with it and what format those fields are in. Those are used to generate view and edit templates which can then be further customized as a particular type requires. </p>\r\n\r\n<p><a name="anchor2.3"></a><h4><a href="#toc" class="toc-link">2.3</a>&nbsp;&nbsp;OL application</h4>\r\n\r\n<p> <i>[ See <a href="http://demo.openlibrary.org/dev/docs/ui">State of the UI</a> ]</i> ... <a name="origin_footnote3"></a><a href="#footnote3" class="footnote">[3]</a> </p>\r\n\r\n\r\n<p><a name="anchor3"></a><h3><a href="#toc" class="toc-link">3.</a>&nbsp;&nbsp;Search</h3>\r\n<p>Infogami also accepts plug-ins and Open Library uses one for the <a href="http://lucene.apache.org/solr/">Solr</a> search engine.  Solr is a JSP currently sitting in a <a href="http://www.mortbay.org/">Jetty</a> http server, so it communicates with Infogami through a local http socket.  Solr itself wraps the <a href="http://lucene.apache.org/">Lucene</a> search library.  These run under <a href="http://java.sun.com/">Java</a> (Open Library currently uses Java 1.5).  Solr is built under <a href="http://ant.apache.org/">Apache Ant</a> and has a few config and schema files, plus a startup script (solr.sh) that has to be manually edited to set the port number.  I think we currently use Lucene as a downloaded .jar file so we don\'t build it.\r\n</p>\r\n\r\n<p>The solr-infogami plugin also calls out to <em>an archive.org PHP script</em> that expands basic search queries to advanced queries.  It may also start using <em>the openlibrary.org flipbook</em> (with some possible customizations) to display OCA scans for pages containing fulltext search results.\r\n</p>\r\n\r\n\r\n<p><a name="anchor4"></a><h3><a href="#toc" class="toc-link">4.</a>&nbsp;&nbsp;Data</h3>\r\n\r\n<p>Open Library has a bunch of catalog data and fulltext acquired from various sources, either sitting in the Archive or to be uploaded to there.  I think the acquisition processes (including web crawling scripts for some of the data) is outside the scope of an Open Library software install. There are a bunch of additional scripts to make the stuff usable in openlibrary and these need to be documented.  These include <em>TDB Conversion Scripts</em> written by dbg, and (for OCA fulltext) <em>Archive Spidering</em> and <em>Solr Importing</em> scripts written by phr.\r\n</p>\r\n\r\n\r\n<p><a name="basics"></a></p><h2>&nbsp;&nbsp;Template Basics</h2>\r\n\r\n<p><a name="anchor5"></a><h3><a href="#toc" class="toc-link">5.</a>&nbsp;&nbsp;Types</h3>\r\n\r\n<p>There are two kinds of types in infogami. <a href="#anchor5.1">Primitive types</a> and <a href="#anchor5.2">compound types.</a> Primitive types are for representing integers, strings etc.</p>\r\n\r\n<p>Other primitive and compound types can be added by creating a page in the wiki with type type/type.\r\n</p>\r\n<p>Sometimes you might want to link two different types. For example, book type has an author property and you want to add a books field to the author, which contains all books where author property of the book is this author. This is achieved by adding a backreference to the author type.\r\n</p>\r\n\r\n<p><a name="anchor5.1"></a><h4><a href="#toc" class="toc-link">5.1</a>&nbsp;&nbsp;Primitive Types</h4>\r\n\r\n<p>Available primitive types are:</p>\r\n\r\n<p>\r\n<b>type/int</b><br />\r\n<b>type/boolean</b><br />\r\n<b>type/string</b> - <i>for single line text</i><br />\r\n<b>type/text</b> - <i>for multiline text</i><br />\r\n</p>\r\n\r\n\r\n<p><a name="anchor5.2"></a><h4><a href="#toc" class="toc-link">5.2</a>&nbsp;&nbsp;Compound Types</h4>\r\n\r\n<p>Compound types specify what properties a thing of that type must have. Available compound types are:</p>\r\n\r\n<p><b>type/type</b><br />\r\n   <i>Type for representing all types. It defines the following properties ... </i>\r\n</p>\r\n<ul>\r\n<li>description of type type/text - description of type </li>\r\n<li>is_multiple of type type/boolean - to distinguish between primitive and compound types</li>\r\n<li>properties of type type/property - set of properties a thing of this type can have. This property can have multiple values.</li>\r\n<li>backreferenes of type type/backreference - set of backreferences a thing of this type can have. This property can have multiple values. Back-references are explained later in this document.</li>\r\n</ul>\r\n\r\n\r\n<p><b>type/property</b><br />\r\n   <i>Type for representing properties in a type. It defines the following properties ...</i>\r\n</p>\r\n<ul>\r\n<li>name of type type/string - name of the property</li>\r\n<li>type of type type/type - expected type of the value</li>\r\n<li>is_unique of type type/boolean - can this type have multiple values?</li>\r\n<li>description of type type/string - readable description of this property</li>\r\n</ul>\r\n\r\n<p><b>type/backreference</b><br />\r\n   <i>later ...</i>\r\n</p>\r\n\r\n<p><b>type/page</b><br />\r\n   <i>Type for wiki pages. It defines the following properties ...</i>\r\n</p>\r\n<ul>\r\n<li>title of type type/string - title of the page</li>\r\n<li>body of type type/text - body of the page</li>\r\n</ul>\r\n\r\n\r\n<p><b>type/template</b><br />\r\n   <i>Type for template pages. It defines the following properties ...</i>\r\n</p>\r\n<ul>\r\n<li>title of type type/string - title of the template</li>\r\n<li>body of type type/text - body of the template</li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n<p><a name="anchor6"></a><h3><a href="#toc" class="toc-link">6.</a>&nbsp;&nbsp;Templates</h3>\r\n\r\n<p>Infogami uses templates to control the look and feel of the site. Custom templates can be provided in the wiki to enhance functionality or customize the look and feel of the site.</p>\r\n\r\n<p>There are two kinds of templates. Regular templates and type-specific templates. Type-specific templates are used to render a wiki page based on its type.</p>\r\n\r\n<p>Regular templates must be placed at path <a href="http://demo.openlibrary.org/templates/">templates/</a> and end with .tmpl extension. type-specific templates must be placed at <a href="http://demo.openlibrary.org/type/">type/</a> and end with .tmpl extension.</p>\r\n\r\n<p>With Open Library, only site administrators can modify the templates that reside in the <a href="http://demo.openlibrary.org/templates/">templates/</a> and <a href="http://demo.openlibrary.org/type/">type/</a> directories. If users want to override these templates, they must create their own set of templates in their user directory, and change their template root in their user preferences. For more information, see <a href="#anchor6.3">Custom Templates.</a>\r\n\r\n<p><a name="anchor6.1"></a><h4><a href="#toc" class="toc-link">6.1</a>&nbsp;&nbsp;Type-specific Templates</h4>\r\n\r\n<p>There can be 4 type-specific templates for every type.\r\n</p>\r\n<ul>\r\n <li><b>view.tmpl</b> - Template to specify how to view a page</li>\r\n <li><b>edit.tmpl</b> - Template to specify how to edit a page</li>\r\n <li><b>repr.tmpl</b> - Template to specify how objects of this type appear when viewing pages of other types which has a property of this type.</li>\r\n <li><b>input.tmpl</b> - Template to specify how objects of this type appear when editing pages of other types which has a property of this type.</li>\r\n</ul>\r\n\r\n<p>For more information on how the repr and input templates are used, please see <a href="#anchor3.4">Useful Functions.</a></p>\r\n\r\n<p><a name="anchor6.2"></a><h4><a href="#toc" class="toc-link">6.2</a>&nbsp;&nbsp;Default Templates</h4>\r\n\r\n<p>It is not compulsory to specify all these templates for every type. When a type-specific template is not specified for a type, a default template is used. The following are the default templates:\r\n</p>\r\n<ul>\r\n <li><b>templates/default_view.tmpl</b> - <a href="http://demo.openlibrary.org:8080/templates/default_view.tmpl">View Code</a> or <a href="http://demo.openlibrary.org:8080/type/page">View Page Using Template</a></li>\r\n <li><b>templates/default_edit.tmpl</b> - <a href="http://demo.openlibrary.org:8080/templates/default_edit.tmpl">View Code</a> or <a href="http://demo.openlibrary.org:8080/type/page?m=edit">View Page Using Template</a></li>\r\n <li><b>templates/default_repr.tmpl</b> - <a href="http://demo.openlibrary.org:8080/templates/default_repr.tmpl">View Code</a> </li>\r\n <li><b>templates/default_input.tmpl</b> - <a href="http://demo.openlibrary.org:8080/templates/default_input.tmpl">View Code</a> </li>\r\n <li><i>Note to Anand: what about http://demo.openlibrary.org:8080/templates/default_ref.tmpl ?</i></li>\r\n</ul>\r\n<p>There are many other interesting regular templates. Some of them are:\r\n</p>\r\n<ul>\r\n <li><b>templates/site.tmpl</b> - to specify the overall look and feel of a web site - <a href="http://demo.openlibrary.org:8080/templates/site.tmpl">View Code</a> or <a href="http://demo.openlibrary.org:8080/">View Page Using Template</a></li>\r\n <li><b>templates/diff.tmpl</b> - to display a diff between two versions of a page - <a href="http://demo.openlibrary.org:8080/templates/diff.tmpl">View Code</a> or <a href="http://demo.openlibrary.org:8080/dev/docs?b=13&a=12&m=diff">View Page Using Template</a></li>\r\n <li>...</li>\r\n</ul>\r\n\r\n<p><a name="anchor6.3"></a><h4><a href="#toc" class="toc-link">6.3</a>&nbsp;&nbsp;Custom Templates</h4>\r\n\r\n<a href="http://demo.openlibrary.org/preferences/"><img src="http://invisible.net/openlibrary/ui_files//login.png" align="right" border="0" /></a>\r\n\r\n<p>A user can create their own set of templates by creating a subdirectory in the \'user\' directory (\'user/[username]\'). \r\nA user can create a new template for each set of templates they want to override. If a template does not exist in a user\'s subdirectory, \r\nthen the default set of templates will be used. Templates are created in the same manner as any new page is created in a wiki.\r\n<!-- Please note that the default templates that exist in the \'templates\' directory are only \r\neditable by Open Library site administrators. --></p>\r\n\r\n<p>For purposes of illustration, we will view the contents of (\'user/brewster/*\')\r\n<ul>\r\n<li><a href="http://demo.openlibrary.org/user/brewster/type">user/brewster/type/</a></li>\r\n<li><a href="http://demo.openlibrary.org/user/brewster/templates">user/brewster/templates/</a></li>\r\n</ul>\r\n\r\n\r\n<p>To view the Open Library using a set of custom templates, you must change your template preferences: </p>\r\n\r\n<ul>\r\n<li>Log in with your username and password</li>\r\n<li>Click on <a href="http://demo.openlibrary.org/preferences">"Preferences"</a> in the upper-right corner of the screen</li>\r\n<li>Change your template root to "user/[username]"</li>\r\n</ul>\r\n\r\n<p><i>NOTE: Changing the template root to \'user/brewster\' will load the templates used <a href="http://invisible.net/openlibrary/ui_files//brewster.skin.png?keepThis=true&amp;TB_iframe=true&amp;height=599&amp;width=800" title="User-defined Template Set (click on image to return to document)" class="thickbox">in this example.</a></i></p>\r\n\r\n<p>It is also possible to create custom Cascading Style Sheet (CSS) files and JavaScript files in the wiki. \r\n\r\n<p>To create a custom CSS file in the wiki, \r\ncreate a page in your user directory entitled \'user/[username]/[filename].css\' and select \'rawtext\' for the pagetype. Once the CSS file has been successfully created,\r\n it can be linked to the template using the \'$add_stylesheet\' command:</p>\r\n\r\n<div class="wp">\r\n<code class="normal">\r\n$add_stylesheet(\'/static/css/search.css\')\r\n</code></div>\r\n\r\n<p>JavaScript files can be created in the same manner, using a \'.js\' extension and the \'$add_javascript\' command:</p>\r\n\r\n<div class="wp">\r\n<code class="normal">\r\n$add_stylesheet(\'/static/js/randomsearch.js\')\r\n</code></div>\r\n\r\n<p>It is important to note that when a page with the type \'rawtext\' is added to the wiki, the editing function is not readily apparent. \r\nTo edit a rawtext page, simply add \'?m=edit\' to the url.</p>\r\n\r\n<p><i>Example:</i>\r\n<ul>\r\n<li><a href="http://demo.openlibrary.org/user/anand/master.css">http://demo.openlibrary.org/user/anand/master.css</a></li>\r\n<li><a href="http://demo.openlibrary.org/user/anand/master.css?m=edit">http://demo.openlibrary.org/user/anand/master.css?m=edit</a></li>\r\n</ul>\r\n\r\n<p><a name="anchor6.4"></a><h4><a href="#toc" class="toc-link">6.4</a>&nbsp;&nbsp;Useful Functions</h4>\r\n\r\n<p>There are some useful functions, which are very handy in writing view and edit templates.\r\n</p>\r\n\r\n<ul>\r\n<li><b>thingrepr(value, type) - </b>This calls repr template of the specified type with value as argument.</li>\r\n<li><b>thinginput(type, name, value) - </b>This calls input template of the specified type with value, name as arguments.</li>\r\n</ul>\r\n\r\n<p>Lets take an example. Suppose there are many types, which need to display an image. Probably they will do that by defining a type type/image for representing images. Instead of worrying how to display and edit (upload) images, these types can just use <code>thingrepr</code> and <code>thinginput</code> macros and define <code>repr</code> and <code>input</code> templates for <code>type/image</code>. Later in future, if you want to change how to display/upload image, you don\'t have to change in multiple places.</p>\r\n\r\n<p>There are some global functions, which are accessible by every template. For more information see <a href="#anchor10.4">Infogami API &gt; Decorators</a>.\r\n</p>\r\n\r\n\r\n\r\n\r\n<p><a name="anchor7"></a><h3><a href="#toc" class="toc-link">7.</a>&nbsp;&nbsp;Macros</h3>\r\n\r\n<p>Macros are like functions in any programming language.\r\n   Macros look very much like templates, but they can be called from wikipages and other templates and macros. \r\n   Macros can be written in the wiki just like templates. \r\n   Macros must be placed in <a href="http://demo.openlibrary.org/macros/">macros/</a> path and type must be type/macro. As a convention, they are named in <code>CamelCase</code>. \r\n</p>\r\n\r\n<p><a name="anchor7.1"></a><h4><a href="#toc" class="toc-link">7.1</a>&nbsp;&nbsp;Best Practices</h4>\r\n\r\n<p>Macros introduce an element of modularity when designing web templates in infogami. A common practice is to use macros for any repeatable design elements. This can be as simple as an HTML callout box, or a script. For instance, the "SAVE", "PREVIEW", and "DELETE" buttons on every edit form on the Open Library site are generated by the "EditButtons" Macro code below:\r\n\r\n<div id="form-border">\r\n<div id="metadata-body">\r\n{{EditButtons()}}\r\n<br /><br />\r\n<div class="wp">\r\n<code class="normal">\r\n&lt;p&gt;&lt;strong&gt;Edit summary&lt;/strong&gt; (briefly describe the changes you have made):<br />\r\n&lt;input type="text" name="_comment" style="width: 100%" value="" /&gt;<br />\r\n&lt;/p&gt;<br />\r\n&lt;p&gt;<br />\r\n&lt;button class="button" type="submit"  value="$_.SAVE"  name="_save" title="Save"&gt;&lt;img src="/static/images/save.png" alt="Save" /&gt;&lt;/button&gt;<br />\r\n&lt;button class="button" type="submit"  value="$_.PREVIEW" name="_preview" title="Preview"&gt;&lt;img src="/static/images/preview.png" alt="Preview" /&gt;&lt;/button&gt;<br />\r\n&lt;button class="button" type="submit"  value="$_.DELETE" name="_delete" title="Delete"&gt;&lt;img src="/static/images/delete.png" alt="delete" /&gt;&lt;/button&gt;<br />\r\n</p>\r\n<br /></code></div>\r\n</div>\r\n</div>\r\n\r\n\r\n<p>Intelligent use of macros results in clean, readable code that can be easily understood and repurposed by other users. For instance, the <a href="http://demo.openlibrary.org/type/author/view.tmpl">author view</a> template is a good example of a template with a highly modular and streamlined design. <a href="http://demo.openlibrary.org:8080/a/Mark_Twain">View Page Using Template</a>\r\n\r\n\r\n<p><a name="anchor7.2"></a><h4><a href="#toc" class="toc-link">7.2</a>&nbsp;&nbsp;Embedding</h4>\r\n\r\n<p>Macros can be invoked either through the wiki interface when editing a page in Markdown, or as a script when building web templates.\r\n\r\n<p>The syntax to call a macro from a wiki page is:\r\n</p>\r\n<div class="wp">\r\n<code class="normal">{{HelloWorld()}} or {{MyMacro(&quot;arg1&quot;, &quot;arg2&quot;)}}<br />\r\n\r\n</code></div><p>The syntax to call a macro from templates and macros is:\r\n</p>\r\n<div class="wp">\r\n<code class="normal">$:macros.HelloWorld() and $:macros.MyMacro(&quot;arg1&quot;, &quot;arg2&quot;)<br />\r\n</code></div>\r\n\r\n\r\n<p><a name="wiki"></a></p><h2>&nbsp;&nbsp;WikiLanguage</h2>\r\n\r\n<p><a name="anchor8"></a><h3><a href="#toc" class="toc-link">8</a>&nbsp;&nbsp;Formatting Conventions</h3>\r\n\r\n<p><a name="anchor8.1"></a><h4><a href="#toc" class="toc-link">8.1</a>&nbsp;&nbsp;Page Headers</h4>\r\n\r\n<p>The edit and view templates are defined by two lines of code that must be at the \r\ntop of the template file in order for them to function properly (The absence of either \r\nof these two lines will generate an error). For instance, this example is from the \r\ndefault edition template:</p>\r\n\r\n\r\n<div class="wp">\r\n<code class="normal"> \r\n\t$def with (page)<br />\r\n<br />\r\n\t$var title: $page.title\r\n</code></div>\r\n\r\n<p>Additional variables can be controlled in these commands. For instance, in an edit \r\ntemplate, the preview function can be disabled as follows:</p>\r\n\r\n\r\n<div class="wp">\r\n<code class="normal"> \r\n\t$def with (page, preview=False )\r\n</code></div>\r\n\r\n<p>Display of the &lt;TITLE&gt; of the page can be constructed by making a call to a universal \r\nlanguage file. For instance:</p>\r\n\r\n\r\n<div class="wp">\r\n<code class="normal"> \r\n\t$var title: $_.EDIT $page.title\r\n</code></div>\r\n\r\n<p>would display "edit Tom Sawyer" in the edit view of an edition page by accessing the verbiage in the language file for \'$_.EDIT\' (edit)\r\n and the \'title\' key in the \'edition\' type [ See <a href="http://demo.openlibrary.org/type/edition/">http://demo.openlibrary.org/type/edition/</a>].\r\n\r\n<p>and:</p>\r\n\r\n\r\n<div class="wp">\r\n<code class="normal"> \r\n\t$var title: $_.VIEW $page.d.get(\'name\')\r\n</code></div>\r\n\r\n<p>would display "View Mark Twain" when viewing an author page by accessing the \'name\' \r\nattribute in the \'author\' type [See <a href="http://demo.openlibrary.org/type/author/">http://demo.openlibrary.org/type/author/</a>].\r\n\r\n<p><a name="anchor8.2"></a><h4><a href="#toc" class="toc-link">8.2</a>&nbsp;&nbsp;Format Commands</h4>\r\n<p><a name="anchor8.3"></a><h4><a href="#toc" class="toc-link">8.3</a>&nbsp;&nbsp;Working with Types</h4>\r\n\r\n<p>The page \'get\' statements make a call to the document type to pull the corresponding \r\ninformation for display on the page. For instance the following table illustrates our \r\ncurrent author type:</p>\r\n\r\n<div id="form-border">\r\n<div id="metadata-body">\r\n\r\n<table cellpadding="0" cellspacing="0" border="0" width="100%">\r\n<tbody>\r\n\r\n<tr>\r\n  <td class="historyheader"><img src="/static/images/name.schema.png" alt="Name" border="0" /></td>\r\n  <td class="historyheader"><img src="/static/images/type.schema.png" alt="Type" border="0" /></td>\r\n</tr>\r\n\r\n<tr>\r\n    <td class="history">description</td>\r\n    <td class="history">\r\n</td>\r\n</tr>\r\n<tr>\r\n    <td class="history">is_primitive</td>\r\n\r\n    <td class="history">\r\n</td>\r\n</tr>\r\n<tr>\r\n    <td class="history">properties</td>\r\n    <td class="history">website  of type <a href="/type/string">type/string</a>\r\n\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n\r\n    <td class="history">properties</td>\r\n    <td class="history">bio  of type <a href="/type/string">type/string</a>\r\n\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n    <td class="history">properties</td>\r\n    <td class="history">photograph  of type <a href="/type/image">type/image</a>\r\n\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n    <td class="history">properties</td>\r\n    <td class="history">name  of type <a href="/type/string">type/string</a>\r\n\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n\r\n    <td class="history">properties</td>\r\n    <td class="history">death_date  of type <a href="/type/string">type/string</a>\r\n\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n    <td class="history">properties</td>\r\n    <td class="history">alt_names  of type <a href="/type/string">type/string</a>\r\n\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n    <td class="history">properties</td>\r\n    <td class="history">location  of type <a href="/type/string">type/string</a>\r\n\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n\r\n    <td class="history">properties</td>\r\n    <td class="history">birth_date  of type <a href="/type/string">type/string</a>\r\n\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n    <td class="history">backreferences</td>\r\n    <td class="history">Back-reference to authors property of <a href="/type/edition">type/edition</a>\r\n\r\n\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n</div>\r\n</div>\r\n\r\n\r\n<p>Therefore using this command:</p>\r\n\r\n<div class="wp">\r\n<code class="normal"> \r\n\t$page.d.get(\'name\')\r\n</code></div>\r\n\r\n<p>on the view template will display the author name wherever used on an author template.</p>\r\n\r\n<p><a name="anchor9"></a><h3><a href="#toc" class="toc-link">9</a>&nbsp;&nbsp;Template Syntax</h3>\r\n\r\n<p><a name="anchor9.1"></a><h4><a href="#toc" class="toc-link">9.1</a>&nbsp;&nbsp;Conditionals</h4>\r\n\r\n<p>\'If\' statements are used in much the same manner as in other scripting languages, \r\ninvoking an action if a certain state exists. For instance, if page preview is activated in an edit template as follows:</p>\r\n \r\n<div class="wp">\r\n<code class="normal"> \r\nif $def with (page, preview=True ), \r\n</code></div>\r\n\r\n<p>the following command would format the HTML contents of the page \r\nwherever it is inserted in the edit template:</p>\r\n\r\n<div class="wp">\r\n<code class="normal"> \r\n$if preview:<br />\r\n<br />\r\n    &lt;p&gt;$:format(page.body)&lt;/p&gt;\r\n</code></div>\r\n    \r\n<p>The \'if\' statement can also be used in conjunction with the \'get\' statement to hide \r\nempty data fields on a page. For instance:</p>\r\n\r\n<div class="wp">\r\n<code class="normal"> \r\n\t$if page.d.get(\'language\'): <br /><b>Language:</b> $page.language\r\n</code></div>\r\n\r\n<p>would display the language a book was published in if that data is available for that \r\nbook, or:</p>\r\n\r\n<div class="wp">\r\n<code class="normal"> \r\n\t$if page.d.get(\'birth_date\'): $page.d.get(\'birth_date\')&nbsp;-&nbsp;<br />\r\n\t$if page.d.get(\'death_date\'): $page.d.get(\'death_date\')\r\n</code></div>\r\n\r\n<p>would display the date of birth and date of death for a given author on the author \r\nview template if they exist.</p>\r\n\r\n\r\n<p><a name="anchor9.2"></a><h4><a href="#toc" class="toc-link">9.2</a>&nbsp;&nbsp;Loops and Iterations</h4>\r\n<p><a name="anchor9.3"></a><h4><a href="#toc" class="toc-link">9.3</a>&nbsp;&nbsp;Regular Expressions</h4>\r\n\r\n<p><a name="api"></a></p><h2>&nbsp;&nbsp;The Infogami API</h2>\r\n\r\n<p><a name="anchor10"></a><h3><a href="#toc" class="toc-link">10.</a>&nbsp;&nbsp;Plugins</h3>\r\n\r\n<p>Functionality of infogami can be extended by adding new plugins to it. \r\n   Plugin in infogami is a python package with the following directory structure.\r\n</p>\r\n<ul>\r\n <li><b>foo/</b></li>\r\n <li><b>foo/__init__.py</b> - required to make foo a python package</li>\r\n <li><b>foo/code.py</b> - this is imported when infogami starts</li>\r\n <li><b>foo/templates/</b> - place to keep templates. This is optional.</li>\r\n</ul>\r\n<p>see <code>sample_run.py</code> in infogami repository to find out how to add a plugin to infogami.\r\n</p>\r\n\r\n<p><a name="anchor10.1"></a><h4><a href="#toc" class="toc-link">10.1</a>&nbsp;&nbsp;Special Pages and Modes</h4>\r\n\r\n<p>A plugin can add special pages to infogami and add new modes to wiki pages. \r\n   Special pages are paths which are treated differently than regular wiki pages. login, logout, sitepreferences etc. are some examples of special pages. Modes are actions that be done on a wiki page. view, edit, history, diff etc. are some examples of wiki modes.\r\n</p>\r\n<p><code>infogami.utils.delegate</code> module provides two special classes <code>page</code> and <code>mode</code>. Any class that extends from <code>page</code>  becomes a special page with path same as the class name and any class that extends from <code>mode</code> becomes a wiki mode with name of the mode same as the class name.\r\n</p>\r\n\r\nAn example:\r\n\r\n<div class="wp">\r\n<pre><code class="normal"> # hello/code.py\r\n class hellopage(delegate.page)\r\n     def GET(self, site)\r\n         return &quot;hello page!&quot\r\n\r\n class hello(delegate.mode)\r\n     def GET(self, site, path)\r\n         return &quot;hello mode for &quot; + path\r\n</code></pre></div>\r\n\r\nIf this `hello` plugin is added to infogami, `/hellopage` page displays `hello page!` and `/foo?m=hello` displays `hello mode for foo`.\r\n\r\n<p><a name="anchor10.2"></a><h4><a href="#toc" class="toc-link">10.2</a>&nbsp;&nbsp;Actions</h4>\r\n\r\n<p>A plugin can also add new <code>actions</code> to the system. Action is a utility function, which can be invoked from the command line as shown in the following example.\r\n</p>\r\n<div class="wp">\r\n<code class="normal">$ python run.py action_name arg1 arg2<br />\r\n<br />\r\n$ python run.py startserver 9000<br />\r\n$ python run.py help<br />\r\n$ python run.py movetemplates<br />\r\n</code></div><p>The default action is <code>startserver</code> and that is invoked when no action is specified. \r\n</p>\r\n<p>To convert a function in to an action, it must decorated with <code>infogami.action</code> decorator. The following is an example of action.\r\n\r\n</p>\r\n<div class="wp">\r\n<code class="normal">@infogami.action<br />\r\ndef hello(name=&quot;world&quot;):<br />\r\n    print &quot;hello, &quot; + name + &quot;!&quot;<br />\r\n</code></div><p>Once this plugin is added to infogami, this action can be used.\r\n</p>\r\n<div class="wp">\r\n<code class="normal">$ python run.py hello<br />\r\nhello, world!<br />\r\n$ python run.py infogami<br />\r\nhello, infogami!<br />\r\n</code></div><p>The <code>help</code> action prints the list of all available actions.\r\n</p>\r\n\r\n<p>There are some important actions, that every plugin author must know. \r\n</p>\r\n<p><strong>install</strong>: The <code>install</code> action runs all the install hooks. Install hook is a function without any arguments decorated by <code>infogami.install_hook</code>. Any plugin can add a new install hook to do some actions to initialize an infogami instance. Some of the actions are install hooks too.\r\n</p>\r\n<p><strong>movefiles</strong>: The <code>movefiles</code> action moves all the files in <code>$plugin/files/</code> from every plugin to <code>static/</code> directory. This is also an install hook. If a plugin needs to access any static resources, they must be put in <code>files/</code> directory of that plugin. Keeping resources directly in <code>static/</code> is not a good idea and should be discouraged.\r\n\r\n</p>\r\n<p><strong>movetemplates</strong>: The <code>movetemplates</code> action moves templates from every plugin to wiki. Optional prefix can be specified to limit the templates that are moved into the wiki. This is also an install hook.\r\n</p>\r\n\r\n\r\n<p><a name="anchor10.3"></a><h4><a href="#toc" class="toc-link">10.3</a>&nbsp;&nbsp;Classes</h4>\r\n<p><a name="anchor10.4"></a><h4><a href="#toc" class="toc-link">10.4</a>&nbsp;&nbsp;Decorators</h4>\r\n\r\n<p>To make a function accessible in templates, that function must be decorated with <code>infogami.utils.view.public</code> decorator. \r\n   Since templates can be written by untrusted users, utmost care must be taken when exposing a function in templates.\r\n</p>\r\n\r\n<p><a name="anchor10.5"></a><h4><a href="#toc" class="toc-link">10.5</a>&nbsp;&nbsp;Security Considerations</h4>\r\n\r\n<p>The basic flow is: the user submits a url or HTML form; the FCGI handler\r\nmatches the URL patch against a series of regexps to dispatch the\r\nrequest to the proper plugin; the plugin receives the GET or POST data\r\nand creates results as Python objects (e.g. a list of strings or ints);\r\nthe plugin then loads a template (designated in the plugin code) which\r\nreceives the result objects as arguments.  The template code then\r\nexpands the result to HTML which gets presented to the user\'s browser.\r\nThus, a user can "re-skin" the application by modifying the static HTML\r\nor the script code in the templates that he or she uses.  A few initial\r\ntemplates (such as the application\'s top-level HTML page) are included\r\nin the application source tree, and the rest are created and edited\r\nthrough the wiki interface.</p>\r\n\r\n<p>Plugins are written by the application developers and are part of the\r\nsource code tree for the application.  Templates are entered and updated\r\nthrough the wiki HTTP interface, are stored in the database just like\r\nother wiki pages, and can be written by arbitary users.  Thus, templates\r\nare potentially hostile and therefore require security precautions\r\nduring execution.  Templates give a flexible means of creating\r\npresentation HTML, but for security reasons, operations requiring access\r\nto system functions must be implemented in plugins, not templates.\r\nTemplates can be application-wide or can be specific to a given user\r\naccount.</p>\r\n\r\n\r\n\r\n\r\n<!--\r\n<p><a name="anchor11"></a></p><h2>&nbsp;&nbsp;Acknowledgements</h2>\r\n--?\r\n\r\n<p><a name="anchor12"></a></p><h2>&nbsp;&nbsp;Authors</h2>\r\n       <p><a href="http://demo.openlibrary.org/user/aaronsw/">aaronsw</a>,\r\n <a href="http://demo.openlibrary.org/user/anand/">anand</a>,\r\n <a href="http://demo.openlibrary.org/user/phr/">solrize</a> and\r\n <a href="http://demo.openlibrary.org/user/webchick/">webchick</a>.</p>\r\n\r\n<p><a name="anchor13"></a></p><h2>&nbsp;&nbsp;References</h2>\r\n\r\n<table border="0" width="99%">\r\n<tbody>\r\n<tr><td class="author-text" valign="top"><b><a name="footnote1"></a><a href="#origin_footnote1" class="footnote">[1]</a></b></td>\r\n<td class="author-text">"<a href="http://demo.openlibrary.org/about/tech">About the technology</a>", last edited <a href="http://demo.openlibrary.org/about/tech?m=history">August 2007.</a><br>\r\n<span class="hyperlink">http://demo.openlibrary.org/about/tech</span></td>\r\n</tr>\r\n<tr><td class="author-text" valign="top"><b><a name="footnote2"></a><a href="#origin_footnote2" class="footnote">[2]</a></b></td>\r\n<td class="author-text">"<a href="http://demo.openlibrary.org/about/architecture">About the architecture</a>", last edited <a href="http://demo.openlibrary.org/about/architecture?m=history">August 2007.</a><br>\r\n<span class="hyperlink">http://demo.openlibrary.org/about/architecture</span></td>\r\n</tr>\r\n<tr><td class="author-text" valign="top"><b><a name="footnote3"></a><a href="#origin_footnote3" class="footnote">[3]</a></b></td>\r\n<td class="author-text">"<a href="http://demo.openlibrary.org/dev/docs/ui/">State of the UI</a>", last edited <a href="http://demo.openlibrary.org/dev/docs/ui?m=history">September 2007.</a><br>\r\n<span class="hyperlink">http://demo.openlibrary.org/dev/docs/ui/</span></td>\r\n</tr>\r\n<tr><td class="author-text" valign="top"><b><a name="footnote4"></a><a href="#origin_footnote4" class="footnote">[4]</a></b></td>\r\n<td class="author-text">"<a href="http://infogami.org/dev/quicklook">Quick Look at Infogami</a>", last edited <a href="http://infogami.org/dev/quicklook?m=history">October 2007.</a><br>\r\n<span class="hyperlink">http://infogami.org/dev/quicklook</span></td>\r\n</tr>\r\n</tbody></table>\r\n\r\n\r\n\r\n<p><a name="anchor14"></a></p><h2>&nbsp;&nbsp;Template and Plugin Examples</h2>\r\n\r\n<p>The following examples illustrate what is possible with the Infogami template language.</p>\r\n\r\n<p><img src="http://invisible.net/openlibrary/ui_files//arrow.png" alt="Disclosure Arrow"> <a href="http://demo.openlibrary.org/static/docs/results.png?keepThis=true&amp;TB_iframe=true&amp;height=599&amp;width=800" title="Faceted Search example (click on image to return to document)" class="thickbox">Search Template</a><br />\r\n<img src="http://invisible.net/openlibrary/ui_files//arrow.png" alt="Disclosure Arrow"> <a href=".png?keepThis=true&amp;TB_iframe=true&amp;height=599&amp;width=800" title="Price Check (click on image to return to document)" class="thickbox">Price Check</a> <br />\r\n<img src="http://invisible.net/openlibrary/ui_files//arrow.png" alt="Disclosure Arrow"> <a href=".png?keepThis=true&amp;TB_iframe=true&amp;height=599&amp;width=800" title="Price Check (click on image to return to document)" class="thickbox">Data Visualization</a> </p>\r\n\r\n<p><a name="anchor16"></a></p><h2>&nbsp;&nbsp;Code Repository</h2>\r\n\r\n<p>The infogami code repository can be found <a href="http://infogami.org/hg/">here.</a></p>\r\n\r\n<p><a name="anchor17"></a></p><h2>&nbsp;&nbsp;Installing the Software</h2>\r\n\r\n<p>Installation instructions can be found <a href="http://demo.openlibrary.org/dev/docs/setup">here.</a></p>\r\n\r\n<!--\r\n<p><a name="anchorA"></a></p><h2>&nbsp;&nbsp;Differences From Python</h2>\r\n\r\n<p><font color="green"><i>[ phr to write ]</i></font></p>\r\n-->\r\n\r\n<p><a name="anchor18"></a></p><h2>&nbsp;&nbsp;Troubleshooting</h2>\r\n\r\n<p>Q. I can\'t change my page type when I create a new page in the wiki using my new \r\n   template set. Whenever I change the page type (to \'edition\' instead of \'page\', for \r\n   instance), it reverts back to the original type.\r\n</p>\r\n<p>A. Make sure your edit template contains the box for \'page type\'. It is possible that \r\n   it was removed when the form was designed. The absence of this box means that the \r\n   template loses the type information whenever it is saved.\r\n</p>\r\n<p>Q. I am trying to use custom graphics using the type for my particular page template \r\n   set, however it generates this error:  error in processing template: AttributeError: \r\n   \'str\' object has no attribute \'png\' (falling back to default template). What gives?\r\n</p>\r\n<p>A. Aha. You have to say ${key}.png because otherwise it thinks you want the png field \r\n   of the key variable (as in $page.doi).\r\n</p>\r\n\r\n<p>Q. Why doesn\'t the HTML formatting I enter in my edit template show up correctly on my \r\n   view template? I added carraige returns and page breaks in all the appropriate places, \r\n   but it runs together in one long paragraph.\r\n</p>\r\n<p>A. You need to use the \'$:format\' command to support HTML formatting. For instance, to \r\n   properly format the appearance of a biography on the author view page you would need \r\n   to add the following the script in the appropriate place on the page:\r\n</p>\r\n<p>$:format(page.bio)\r\n</p>\r\n<p>Q. My HTML code for any images I add via a page edit form displays on the view page. \r\n   For example, instead of a photo of Dave Eggers, I see &quot;&lt;img src=&quot;http://ia350629.us.archive.org/3/items/ol-images/daveeggers.gif&quot; align=&quot;left&quot;&gt;&quot;\r\n\r\n</p>\r\n<p>A. Again, you need to use:\r\n</p>\r\n<p>$:format(page.bio)\r\n   instead of\r\n   $page.bio\r\n</p>\r\n<p>if you want to support HTML formatting.\r\n</p>\r\n<p>Q. Help! My edit template for [this page] is royally hosed. I was trying to do \r\n   something fancy with [form layout | javascript | etc. ] and broke the edit template so \r\n   badly that I can\'t get back in and correct it.\r\n</p>\r\n<p>A. Use the emergency override to fall back to a very simplified template version and \r\n   see if you can make your corrections there: \r\n</p>\r\n<div class="wp">\r\n<code class="normal">[url]?m=edit&amp;rescue=true\r\n</code></div>\r\n\r\n\r\n\r\n<p><br><br><br>\r\n</p>\r\n', 'title': 'Infogami Developer Tutorial'}}